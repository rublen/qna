- cache ["#{can?(:destroy, @question)}-#{can?(:vote, @question)}-#{can?(:unvote, @question.vote_by(current_user))}", @question] do
  .question.pt-4 id="question-#{@question.id}"
    h2.question-title = @question.title
    .row.border-bottom
      .col-xs-3.col-md-1.col-lg-1
        .voting.pr-3.text-secondary.text-center
          - if current_user&.author_of?(@question)
            = render 'votes/voting_disabled', votable: @question
          - else
            = render 'votes/voting', votable: @question

      .col-xs-9.col-md-11.col-lg-11
        .question-body = @question.body

        .attachments
          = render @question.attachments

        - if can?(:update, @question)
          = link_to 'Edit', '', class: "edit-link badge text-secondary", data: { model: 'question', id: @question.id }

          div id="edit-question-form-#{@question.id}" class='hide'
            = form_with model: @question do |f|
              = render 'form_content', question: @question, f: f

        - if can?(:destroy, @question)
          = "|"
          = link_to 'Delete', @question, method: :delete, class: "badge text-secondary"

        .asked-by.text-muted.text-right
          small
            em= "Asked by #{@question.author.email}, #{@question.created_at.strftime('%F %T')}"

        .comments
          small
            ul.collection-group= render @question.comments
            = link_to 'Add comment', '', class: 'add-comment-link'
            .new-comment-form.hide
              = render 'comments/form', commentable: @question, comment: @question.comments.new

  h3
    em Answers:
  .answers
    = render @answers

  .new-answer-form
    = render 'answers/form', answer: @answer

.subscriptions
  = "You can "
  - if current_user&.subscribed?(@question)
    = link_to 'Unfollow', current_user.subscriptions.find_by(question: @question), method: :delete, remote: true
  - else
    = link_to 'Follow', question_subscriptions_path(@question.id), method: :post, remote: true
  = " this question"
